{"version":3,"sources":["components/modal/ModalItem.module.scss","components/table/tableTitle/TableTitleRow.module.scss","components/preloader/Preloader.module.scss","components/modal/ModalWindow.module.scss","components/paginator/Paginator.module.scss","views/episodes/Episodes.module.scss","components/filter/listFilter/EpisodeFilter.module.scss","views/locations/Locations.module.scss","components/app/App.module.scss","components/navigation/Navigation.module.scss","components/navigation/navItem/NavLinkItem.module.scss","components/page-title/PageTitle.tsx","components/table/tableTitle/titleItem/titleItem.tsx","components/table/tableTitle/TableTitle.tsx","components/preloader/Preloader.tsx","components/table/tableRow/tableRowItem.tsx","components/table/DataTable.tsx","components/modal/charModalItem/CharModalItem.tsx","graphql/charGQL.ts","components/modal/episodeModalItem/EpisodeModalItem.tsx","components/modal/licationsModalItem/LocationsModalITem.tsx","components/modal/ModalWindow.tsx","components/paginator/Paginator.tsx","components/filter/charFilter/FormItem/Formtem.tsx","components/filter/charFilter/Filter.tsx","components/error/ErrorMessage.tsx","views/characters/staticData.ts","views/characters/Characters.tsx","components/filter/listFilter/ListFilter.tsx","views/episodes/Episodes.tsx","graphql/episodeGQL.ts","views/locations/Locations.tsx","graphql/locationGQL.ts","components/navigation/navItem/NavLinkItem.tsx","components/navigation/Navigation.tsx","components/app/App.tsx","index.tsx","components/table/DataTable.module.scss","views/characters/Characters.module.scss","components/error/ErrorMessage.module.scss","components/filter/charFilter/Filter.module.scss"],"names":["module","exports","PageTitle","title","Helmet","TitleItem","name","useState","reverseArrow","setReverseArrow","TableCell","onClick","className","styles","tableTitleCell","align","charTableItems","episodeTableItems","locationsTableItems","TableTitle","component","TableRow","tableTitleRow","map","el","i","Preloader","wrapper","CircularProgress","size","TableRowItem","handleOpenModal","tableRow","image","id","toString","tableCell","charImage","src","alt","status","episode","type","species","air_date","dimension","gender","url","created","DataTable","componentName","showPreloader","data","openModalWithSelectedEl","e","targetId","currentTarget","firstChild","TableContainer","tableContainer","Paper","Table","aria-label","table","TableHead","TableBody","tableBody","results","CharModalItem","char","itemImg","tableList","location","origin","getCharsById","ids","gql","EpisodeModalItem","charsId","result","characters","push","parseInt","split","getIdFromArr","useQuery","loading","charsImgBlock","charsImgTitle","charactersByIds","charsImgWrap","itemImgSmall","LocationsModalItem","locations","residents","ModalWindow","selectedEl","showModal","setShowModal","Modal","open","onClose","aria-labelledby","aria-describedby","Paginator","page","count","setPage","Pagination","onChange","event","value","color","FormItem","label","optGroup","option","Filter","clearFields","queryParams","setQueryParams","params","setCharPage","personName","setPersonName","useEffect","FormControl","formControl","InputLabel","htmlFor","Select","target","native","ErrorMessage","reset","error","message","Button","variant","button","tableItems","Characters","setCount","charId","setCharId","charPage","setClearFields","getCharList","charData","pagesCount","info","pages","character","filterWrapper","filterSubWrapper","ListFilter","inputsName","clearFilterField","filterList","valueName","setValueName","valueType","setValueType","valueDimension","setValueDimension","form","onSubmit","preventDefault","formData","TextField","Episodes","showPreload","setShowPreload","setClearFilterField","episodePage","setEpisodePage","episodeId","setEpisodeId","episodeFilter","setEpisodeFilter","episodes","Locations","locationPage","setLocationPage","locationId","setLocationId","filerValues","setFilerValues","getLocationList","NavLinkItem","navigationLink","to","Navigation","pagesName","appNavigationBlock","App","appWrapper","path","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.17752884.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ModalItem_wrapper__1meGU\",\"itemImg\":\"ModalItem_itemImg__3H6P0\",\"itemImgSmall\":\"ModalItem_itemImgSmall__X6qty\",\"title\":\"ModalItem_title__2ZANu\",\"table\":\"ModalItem_table__1Vyvd\",\"tableList\":\"ModalItem_tableList__3g4fo\",\"charsImgBlock\":\"ModalItem_charsImgBlock__Uy5En\",\"charsImgTitle\":\"ModalItem_charsImgTitle__2SHZ4\",\"charsImgWrap\":\"ModalItem_charsImgWrap__2ll3m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableTitleRow\":\"TableTitleRow_tableTitleRow__3fd2O\",\"tableCell\":\"TableTitleRow_tableCell__3kOCG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1yupq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ModalWindow_wrapper__2tREt\",\"fadeIn\":\"ModalWindow_fadeIn__qZdWc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Paginator_wrapper__30fFb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Episodes_wrapper__lhg4t\",\"fadeIn\":\"Episodes_fadeIn__1ja3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"EpisodeFilter_form__4cbwQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Locations_wrapper__51ei4\",\"fadeIn\":\"Locations_fadeIn__3GqnM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__uqs78\",\"appNavigationBlock\":\"App_appNavigationBlock__32R9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appNavigationBlock\":\"Navigation_appNavigationBlock__3ZB2N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationLink\":\"NavLinkItem_navigationLink__3e64C\"};","import React, {FC} from \"react\"\r\nimport {Helmet} from \"react-helmet\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n  title?: string\r\n}\r\n\r\nexport const PageTitle: FC<PropsType> = ({ title }) => {\r\n  return (\r\n    <Helmet>\r\n      <title>\r\n        {`Rick and Morty ${title ? `/ ${title}` : \"\"}`}\r\n      </title>\r\n    </Helmet>\r\n  )\r\n}","import React, {FC, useState} from \"react\"\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport styles from \"../../DataTable.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  name: string\r\n}\r\n\r\nexport const TitleItem: FC<PropsType> = ({ name }) => {\r\n  const [reverseArrow, setReverseArrow] = useState<boolean>(true)\r\n\r\n  const handleClick = () => {\r\n    setReverseArrow(!reverseArrow)\r\n  }\r\n\r\n\r\n  return (\r\n    <TableCell onClick={handleClick}\r\n               className={styles.tableTitleCell}\r\n               align=\"left\">\r\n      {name}\r\n    </TableCell>\r\n  )\r\n}","import TableRow from \"@material-ui/core/TableRow\"\r\nimport React, {FC} from \"react\"\r\nimport {TitleItem} from \"./titleItem/titleItem\"\r\nimport styles from \"./TableTitleRow.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  component: string\r\n}\r\n\r\nconst charTableItems = [\"Image\", \"Name\", \"Species\", \"Status\", \"Gender\"]\r\nconst episodeTableItems = [\"Name\", \"Episode\", \"Air-date\", \"Created\"]\r\nconst locationsTableItems = [\"Name\", \"Type\", \"Dimension\", \"Url\"]\r\n\r\nexport const TableTitle: FC<PropsType> = ({ component }) => {\r\n  return (\r\n    <TableRow className={styles.tableTitleRow}>\r\n      {component === \"characters\" && charTableItems\r\n        .map((el, i) => <TitleItem key={i} name={el}/>)\r\n      }\r\n      {component === \"episodes\" && episodeTableItems\r\n        .map((el, i) => <TitleItem key={i} name={el}/>)\r\n      }\r\n      {component === \"locations\" && locationsTableItems\r\n        .map((el, i) => <TitleItem key={i} name={el}/>)\r\n      }\r\n    </TableRow>\r\n  )\r\n}","import {CircularProgress} from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport styles from \"./Preloader.module.scss\"\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <CircularProgress size={60}/>\r\n    </div>\r\n  )\r\n}","import React, {FC} from 'react'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport styles from '../DataTable.module.scss'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport {CharType, EpisodeType, LocationType} from '../../types/types'\r\n\r\n\r\ninterface PropsType {\r\n  handleOpenModal: (e: any) => void\r\n  el: CharType & EpisodeType & LocationType\r\n}\r\n\r\nexport const TableRowItem: FC<PropsType> = ({handleOpenModal, el}) => {\r\n  return (\r\n      <TableRow onClick={handleOpenModal} className={styles.tableRow} key={el.id}>\r\n        {el.image &&\r\n          <TableCell id={el.id.toString()} className={styles.tableCell}>\r\n            <img className={styles.charImage} src={el.image} alt={el.name}/>\r\n          </TableCell>\r\n        }\r\n        <TableCell id={el.id.toString()} align=\"left\">{el.name}</TableCell>\r\n        <TableCell align=\"left\">{el.status || el.episode || el.type}</TableCell>\r\n        <TableCell align=\"left\">{el.species || el.air_date || el.dimension}</TableCell>\r\n        <TableCell align=\"left\">{el.gender || el.url || el.created}</TableCell>\r\n      </TableRow>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport Table from \"@material-ui/core/Table\"\r\nimport TableBody from \"@material-ui/core/TableBody\"\r\nimport TableContainer from \"@material-ui/core/TableContainer\"\r\nimport TableHead from \"@material-ui/core/TableHead\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport {CharResponseType, EpisodeResponseType, LocationResponseType} from \"../types/types\"\r\nimport styles from \"./DataTable.module.scss\"\r\nimport {TableTitle} from \"./tableTitle/TableTitle\"\r\nimport {Preloader} from \"../preloader/Preloader\"\r\nimport {TableRowItem} from \"./tableRow/tableRowItem\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  data: CharResponseType & LocationResponseType & EpisodeResponseType\r\n  showPreloader: boolean\r\n  openModalWithSelectedEl: (id: number) => void\r\n  componentName: string\r\n}\r\n\r\nexport const DataTable: FC<PropsType> = ({\r\n                                           componentName,\r\n                                           showPreloader,\r\n                                           data,\r\n                                           openModalWithSelectedEl\r\n                                         }) => {\r\n\r\n  const handleOpenModal = (e: any) => {\r\n    const targetId = e?.currentTarget?.firstChild?.id\r\n    openModalWithSelectedEl(targetId)\r\n  }\r\n\r\n  return (\r\n    <TableContainer className={styles.tableContainer}\r\n                    component={Paper}>\r\n      {showPreloader && <Preloader/>}\r\n      <Table aria-label=\"simple table\"\r\n             className={styles.table}>\r\n        <TableHead>\r\n          <TableTitle component={componentName}/>\r\n        </TableHead>\r\n        <TableBody className={styles.tableBody}>\r\n          {\r\n            data?.results.map((el: any) => (\r\n              <TableRowItem key={el.id} el={el} handleOpenModal={handleOpenModal}/>\r\n            ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"../ModalItem.module.scss\"\r\nimport {CharType} from \"../../types/types\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  char: CharType\r\n}\r\n\r\nexport const CharModalItem: FC<PropsType> = ({ char }) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <p className={styles.title}>{char.name}</p>\r\n      <img src={char.image} alt={char.name} className={styles.itemImg}/>\r\n      <ul className={styles.table}>\r\n        <li className={styles.tableList}>\r\n          <span>Location:</span>\r\n          {char.location.name}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Gender:</span>\r\n          {char.gender}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Status:</span>\r\n          {char.status}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Species:</span>\r\n          {char.species}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Type:</span>\r\n          {char.type || \"Undefined\"}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Origin name:</span>\r\n          {char.origin.name}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Created:</span>\r\n          {char.created}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import {gql} from \"@apollo/client\"\r\n\r\n\r\n\r\nexport const getChar = (id: number) => {\r\n  return gql`\r\n  query Character {\r\n    character(id: ${id}) {\r\n      id\r\n      name\r\n      status\r\n      species\r\n      type\r\n      gender\r\n      origin {\r\n        name\r\n      }\r\n      location {\r\n        name\r\n      }\r\n      image\r\n      created\r\n    }\r\n  }\r\n  `\r\n}\r\n\r\n\r\nexport const getCharsById = (ids: number[]) => {\r\n  return gql`\r\n  query Character {\r\n  charactersByIds(ids: \"${ids}\") {\r\n      id\r\n      name\r\n      status\r\n      species\r\n      type\r\n      gender\r\n      origin {\r\n        name\r\n      }\r\n      location {\r\n        name\r\n      }\r\n      image\r\n      created\r\n    }\r\n  }\r\n  `\r\n}\r\n\r\nexport const getCharList = (page: number, { gender, status, species }: Record<string, string>) => {\r\n  return gql`\r\n   query Characters {\r\n    characters(page: ${page || 1}, filter: {\r\n      gender: \"${gender}\", \r\n      status: \"${status}\", \r\n      species: \"${species}\"\r\n    }) \r\n    {\r\n      info {\r\n        count\r\n        pages\r\n      }\r\n      results {\r\n        id\r\n        name\r\n        status\r\n        species\r\n        type\r\n        gender\r\n        image\r\n      }\r\n    }\r\n   }\r\n  `\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"../ModalItem.module.scss\"\r\nimport {EpisodeType} from \"../../types/types\"\r\nimport {Preloader} from \"../../preloader/Preloader\"\r\nimport {useQuery} from \"@apollo/client\"\r\nimport {getCharsById} from \"../../../graphql/charGQL\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  episode: EpisodeType\r\n}\r\n\r\nexport const EpisodeModalItem: FC<PropsType> = ({ episode }) => {\r\n\r\n  const getIdFromArr = () => {\r\n    const result: number[] = []\r\n    episode.characters.map((el: any) => result.push(parseInt(el.image.split(\"avatar/\")[1])))\r\n    return result\r\n  }\r\n\r\n  const charsId = getIdFromArr()\r\n  const { data, loading } = useQuery(getCharsById(charsId))\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <p className={styles.title}>{episode.name}</p>\r\n      <ul className={styles.table}>\r\n        <li className={styles.tableList}>\r\n          <span>Id:</span>\r\n          {episode.id}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Air date:</span>\r\n          {episode.air_date}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Episode:</span>\r\n          {episode.episode}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Created:</span>\r\n          {episode.created}\r\n        </li>\r\n        <div className={styles.charsImgBlock}>\r\n          <p className={styles.charsImgTitle}>\r\n            Characters:\r\n          </p>\r\n          {data?.charactersByIds.map((el: any) => {\r\n            return <div key={el.id} className={styles.charsImgWrap}>\r\n              {loading\r\n                ? <Preloader/>\r\n                : <img src={el.image} alt={el.name} className={styles.itemImgSmall}/>\r\n              }\r\n            </div>\r\n          })}\r\n        </div>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"../ModalItem.module.scss\"\r\nimport {LocationType} from \"../../types/types\"\r\nimport {Preloader} from \"../../preloader/Preloader\"\r\nimport {useQuery} from \"@apollo/client\"\r\nimport {getCharsById} from \"../../../graphql/charGQL\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  locations: LocationType\r\n}\r\n\r\nexport const LocationsModalItem: FC<PropsType> = ({ locations }) => {\r\n\r\n  const getIdFromArr = () => {\r\n    const result: number[] = []\r\n    locations.residents.map((el: any) => result.push(parseInt(el.image.split(\"avatar/\")[1])))\r\n    return result\r\n  }\r\n\r\n  const charsId = getIdFromArr()\r\n  const { data, loading } = useQuery(getCharsById(charsId))\r\n\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <p className={styles.title}>{locations.name}</p>\r\n      <ul className={styles.table}>\r\n        <li className={styles.tableList}>\r\n          <span>Id:</span>\r\n          {locations.id}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Type:</span>\r\n          {locations.type}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Dimension:</span>\r\n          {locations.dimension}\r\n        </li>\r\n        <li className={styles.tableList}>\r\n          <span>Created:</span>\r\n          {locations.created}\r\n        </li>\r\n        <div className={styles.charsImgBlock}>\r\n          {data && <p className={styles.charsImgTitle}>Characters:</p>}\r\n          {data?.charactersByIds.map((el: any) => {\r\n            return <div key={el.id} className={styles.charsImgWrap}>\r\n              {loading\r\n                ? <Preloader/>\r\n                : <img src={el.image}\r\n                       alt={el.name}\r\n                       className={styles.itemImgSmall}/>\r\n              }\r\n            </div>\r\n          })}\r\n        </div>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport {CharModalItem} from \"./charModalItem/CharModalItem\"\r\nimport {Modal} from \"@material-ui/core\"\r\nimport styles from \"./ModalWindow.module.scss\"\r\nimport {Preloader} from \"../preloader/Preloader\"\r\nimport {EpisodeModalItem} from \"./episodeModalItem/EpisodeModalItem\"\r\nimport {LocationsModalItem} from \"./licationsModalItem/LocationsModalITem\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  showModal: boolean\r\n  setShowModal: (close: boolean) => void\r\n  selectedEl: any\r\n  name: string\r\n}\r\n\r\nexport const ModalWindow: FC<PropsType> = ({ name, selectedEl, showModal, setShowModal }) => {\r\n\r\n  const handleCloseModal = () => setShowModal(false)\r\n\r\n  return (\r\n    <div>\r\n      {showModal &&\r\n      <Modal\r\n        className={styles.wrapper}\r\n        open={showModal}\r\n        onClose={handleCloseModal}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\">\r\n        <div>\r\n          {!selectedEl\r\n            ? <Preloader/>\r\n            : <div>\r\n              {name === \"characters\" && <CharModalItem char={selectedEl}/>}\r\n              {name === \"episodes\" && <EpisodeModalItem episode={selectedEl}/>}\r\n              {name === \"locations\" && <LocationsModalItem locations={selectedEl}/>}\r\n            </div>\r\n          }\r\n        </div>\r\n      </Modal>\r\n      }\r\n    </div>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport Pagination from \"@material-ui/lab/Pagination\"\r\nimport styles from \"./Paginator.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  count: number\r\n  setPage: (num: number) => void\r\n  page: number\r\n}\r\n\r\nexport const Paginator: FC<PropsType> = ({ page, count, setPage }) => {\r\n\r\n  const handleChange = (event: any, value: number) => {\r\n    setPage(value)\r\n  }\r\n\r\n  return (\r\n    <Pagination onChange={handleChange}\r\n                page={page}\r\n                className={styles.wrapper}\r\n                count={count}\r\n                color=\"primary\"/>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"./FormItem.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  name: string\r\n  value: string[]\r\n}\r\n\r\nexport const FormItem: FC<PropsType> = ({ name, value }) => {\r\n  return (\r\n    <optgroup label={name} className={styles.optGroup}>\r\n      {\r\n        value.map((el, i) => <option className={styles.option} key={i} value={el}>{el}</option>)\r\n      }\r\n    </optgroup>\r\n  )\r\n}","import React, {ChangeEvent, FC, useEffect, useState} from \"react\"\r\nimport {FormControl, InputLabel, Select} from \"@material-ui/core\"\r\nimport styles from \"./Filter.module.scss\"\r\nimport {FormItem} from \"./FormItem/Formtem\"\r\n\r\n\r\n\r\ninterface ParamsType {\r\n  id: number\r\n  name: string\r\n  value: string[]\r\n}\r\n\r\ninterface PropsType {\r\n  queryParams: any\r\n  setQueryParams: (query: any) => void\r\n  params: ParamsType\r\n  name: string\r\n  clearFields: boolean\r\n  setCharPage: (page: number) => void\r\n}\r\n\r\nexport const Filter: FC<PropsType> = ({\r\n                                        clearFields,\r\n                                        queryParams,\r\n                                        setQueryParams,\r\n                                        name,\r\n                                        params,\r\n                                        setCharPage\r\n                                      }) => {\r\n\r\n  const [personName, setPersonName] = useState<any>(\"\")\r\n\r\n  useEffect(() => {\r\n    if (clearFields) {\r\n      setPersonName(\"\")\r\n    }\r\n  }, [clearFields])\r\n\r\n\r\n  const handleChange = (e: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n    const value = e.target.value\r\n    setQueryParams({...queryParams, [name]: value})\r\n    setCharPage(1)\r\n    setPersonName(value)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <FormControl size={\"small\"} className={styles.formControl}>\r\n        <InputLabel htmlFor=\"grouped-native-select\">\r\n          {name}\r\n        </InputLabel>\r\n        <Select value={personName}\r\n                onChange={handleChange}\r\n                native\r\n                id=\"grouped-native-select\">\r\n          <option aria-label=\"None\" value=\"\"/>\r\n          <FormItem name={name} value={params.value}/>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"./ErrorMessage.module.scss\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {ApolloError} from \"@apollo/client\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  error: ApolloError\r\n  setShowModal: (close: boolean) => void\r\n  reset?: () => void\r\n}\r\n\r\nexport const ErrorMessage: FC<PropsType> = ({ reset, setShowModal, error }) => {\r\n\r\n  const handleClick = () => {\r\n    if (reset) {\r\n      reset()\r\n    }\r\n    setShowModal(false)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <p className={styles.error}>\r\n        Error: {error.message}\r\n      </p>\r\n      <Button onClick={handleClick}\r\n              variant={\"contained\"}\r\n              className={styles.button}>\r\n        return to safety\r\n      </Button>\r\n    </div>\r\n  )\r\n}","const status = ['alive', 'dead', 'unknown']\r\nconst species = ['human', 'humanoid', 'alien', 'mythological creature', 'unknown', 'poopybutthole', 'animal', 'robot', 'cronenberg', 'disease', 'planet']\r\nconst gender = ['female', 'male', 'genderless', 'unknown']\r\n\r\nexport const tableItems = [\r\n  {id: 1, name: 'status', value: status},\r\n  {id: 2, name: 'species', value: species},\r\n  {id: 3, name: 'gender', value: gender}\r\n]","import React, {FC, useEffect, useState} from \"react\"\r\nimport styles from \"./Characters.module.scss\"\r\nimport {PageTitle} from \"../../components/page-title/PageTitle\"\r\nimport {DataTable} from \"../../components/table/DataTable\"\r\nimport {ModalWindow} from \"../../components/modal/ModalWindow\"\r\nimport {Paginator} from \"../../components/paginator/Paginator\"\r\nimport {Filter} from \"../../components/filter/charFilter/Filter\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {ErrorMessage} from \"../../components/error/ErrorMessage\"\r\nimport {tableItems} from \"./staticData\"\r\nimport {getChar, getCharList} from \"../../graphql/charGQL\"\r\nimport {useQuery} from \"@apollo/client\"\r\n\r\n\r\n\r\nexport const Characters: FC = () => {\r\n  const [count, setCount] = useState(1)\r\n  const [showModal, setShowModal] = useState<boolean>(false)\r\n  const [charId, setCharId] = useState<number>(1)\r\n  const [charPage, setCharPage] = useState<number>(1)\r\n  const [clearFields, setClearFields] = useState<boolean>(false)\r\n  const [queryParams, setQueryParams] = useState<Record<string, string>>({\r\n    status: \"\",\r\n    species: \"\",\r\n    gender: \"\"\r\n  })\r\n\r\n  const { data, error, loading } = useQuery(getCharList(charPage, {\r\n    status: queryParams.status,\r\n    species: queryParams.species,\r\n    gender: queryParams.gender\r\n  }))\r\n  const { data: charData } = useQuery(getChar(charId))\r\n\r\n  useEffect(() => {\r\n    const pagesCount = data?.characters?.info?.pages\r\n    if (pagesCount) {\r\n      setCount(pagesCount)\r\n    }\r\n  }, [charData])\r\n\r\n\r\n  useEffect(() => {\r\n    if (!error) {\r\n      setClearFields(false)\r\n    }\r\n  }, [error])\r\n\r\n\r\n  useEffect(() => {\r\n    setQueryParams({\r\n      status: \"\",\r\n      species: \"\",\r\n      gender: \"\"\r\n    })\r\n  }, [clearFields])\r\n\r\n\r\n  const openModalWithSelectedChar = (id: number) => {\r\n    setShowModal(true)\r\n    setCharId(id)\r\n  }\r\n\r\n\r\n  const reset = () => {\r\n    setQueryParams({\r\n      status: \"\",\r\n      species: \"\",\r\n      gender: \"\"\r\n    })\r\n    setClearFields(true)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {error && <ErrorMessage reset={reset}\r\n                              error={error}\r\n                              setShowModal={setShowModal}/>\r\n      }\r\n      <PageTitle title={\"Characters\"}/>\r\n      <ModalWindow name={\"characters\"}\r\n                   selectedEl={charData?.character}\r\n                   showModal={showModal}\r\n                   setShowModal={setShowModal}/>\r\n      <div className={styles.filterWrapper}>\r\n        <div className={styles.filterSubWrapper}>\r\n          {\r\n            tableItems.map((el) => {\r\n              return <Filter\r\n                key={el.id}\r\n                clearFields={clearFields}\r\n                name={el.name}\r\n                queryParams={queryParams}\r\n                setCharPage={setCharPage}\r\n                setQueryParams={setQueryParams}\r\n                params={el}/>\r\n            })\r\n          }\r\n          <Button size={\"small\"}\r\n                  color={\"primary\"}\r\n                  variant={\"contained\"}\r\n                  onClick={reset}>\r\n            reset\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <DataTable componentName={\"characters\"}\r\n                 showPreloader={loading}\r\n                 data={data?.characters}\r\n                 openModalWithSelectedEl={openModalWithSelectedChar}/>\r\n      <Paginator page={charPage}\r\n                 setPage={setCharPage}\r\n                 count={count}/>\r\n    </div>\r\n  )\r\n}","import React, {ChangeEvent, FC, useEffect, useState} from \"react\"\r\nimport {Button, TextField} from \"@material-ui/core\"\r\nimport styles from \"./EpisodeFilter.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  filterList: (value: Record<string, string>) => void\r\n  clearFilterField?: boolean\r\n  name: string\r\n  inputsName: string[]\r\n}\r\n\r\nexport const ListFilter: FC<PropsType> = ({ inputsName, name, clearFilterField, filterList }) => {\r\n  const [valueName, setValueName] = useState(\"\")\r\n  const [valueType, setValueType] = useState(\"\")\r\n  const [valueDimension, setValueDimension] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (clearFilterField) {\r\n      setValueName(\"\")\r\n      setValueType(\"\")\r\n      setValueDimension(\"\")\r\n    }\r\n  }, [clearFilterField])\r\n\r\n\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault()\r\n    const formData = e.target\r\n    if (name === \"locations\") {\r\n      filterList({\r\n        name: formData[0].value || \"\",\r\n        type: formData[2].value || \"\",\r\n        dimension: formData[4].value || \"\"\r\n      })\r\n    }\r\n    if (name === \"episodes\") {\r\n      filterList({\r\n        name: formData[0].value\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const handleChangeName = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setValueName(e.target.value)\r\n  }\r\n  const handleChangeType = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setValueType(e.target.value)\r\n  }\r\n  const handleChangeDimension = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setValueDimension(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <TextField value={valueName}\r\n                   onChange={handleChangeName}\r\n                   id=\"outlined-basic\"\r\n                   label={inputsName[0]}\r\n                   variant=\"outlined\"/>\r\n        {\r\n          name === \"locations\"\r\n          &&\r\n          <div>\r\n            <TextField value={valueType}\r\n                       onChange={handleChangeType}\r\n                       id=\"outlined-basic\"\r\n                       label={inputsName[1]}\r\n                       variant=\"outlined\"/>\r\n            <TextField value={valueDimension}\r\n                       onChange={handleChangeDimension}\r\n                       id=\"outlined-basic\"\r\n                       label={inputsName[2]}\r\n                       variant=\"outlined\"/>\r\n          </div>\r\n        }\r\n        <Button type={\"submit\"}\r\n                color={\"primary\"}\r\n                variant={\"contained\"}>\r\n          filter\r\n        </Button>\r\n      </form>\r\n    </>\r\n  )\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport styles from \"./Episodes.module.scss\"\r\nimport {PageTitle} from \"../../components/page-title/PageTitle\"\r\nimport {ModalWindow} from \"../../components/modal/ModalWindow\"\r\nimport {DataTable} from \"../../components/table/DataTable\"\r\nimport {Paginator} from \"../../components/paginator/Paginator\"\r\nimport {ListFilter} from \"../../components/filter/listFilter/ListFilter\"\r\nimport {ErrorMessage} from \"../../components/error/ErrorMessage\"\r\nimport {useQuery} from \"@apollo/client\"\r\nimport {getEpisode, getEpisodeList} from \"../../graphql/episodeGQL\"\r\n\r\n\r\n\r\nexport const Episodes = () => {\r\n  const [count, setCount] = useState(1)\r\n  const [showModal, setShowModal] = useState<boolean>(false)\r\n  const [showPreload, setShowPreload] = useState<boolean>(false)\r\n  const [clearFilterField, setClearFilterField] = useState<boolean>(false)\r\n\r\n  const [episodePage, setEpisodePage] = useState<number>(1)\r\n  const [episodeId, setEpisodeId] = useState<number>(1)\r\n  const [episodeFilter, setEpisodeFilter] = useState<Record<string, string>>({ name: \"\" })\r\n\r\n\r\n  const episode = useQuery(getEpisode(episodeId))\r\n  const { data, loading, error } = useQuery(getEpisodeList(episodePage, episodeFilter.name))\r\n\r\n\r\n  useEffect(() => {\r\n    setShowPreload(loading)\r\n    setClearFilterField(false)\r\n  }, [loading])\r\n\r\n  useEffect(() => {\r\n    const pagesCount = data?.episodes?.info?.pages\r\n    if (pagesCount) {\r\n      setCount(pagesCount)\r\n    }\r\n  }, [data])\r\n\r\n\r\n  const filterEpisode = (value: Record<string, string>) => {\r\n    setEpisodeFilter(value)\r\n  }\r\n\r\n\r\n  const openModalWithSelectedEpisode = (id: number) => {\r\n    setShowModal(true)\r\n    setEpisodeId(id)\r\n  }\r\n\r\n  const reset = () => {\r\n    setEpisodeFilter({ name: \"\" })\r\n    setClearFilterField(true)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <PageTitle title={\"Episodes\"}/>\r\n      {error && <ErrorMessage reset={reset}\r\n                              error={error}\r\n                              setShowModal={setShowModal}/>\r\n      }\r\n      <ModalWindow name={\"episodes\"}\r\n                   selectedEl={episode?.data?.episode}\r\n                   showModal={showModal}\r\n                   setShowModal={setShowModal}/>\r\n      <ListFilter name={\"episodes\"}\r\n                  inputsName={[\"Episode name\"]}\r\n                  clearFilterField={clearFilterField}\r\n                  filterList={filterEpisode}/>\r\n      <DataTable componentName={\"episodes\"}\r\n                 openModalWithSelectedEl={openModalWithSelectedEpisode}\r\n                 data={data?.episodes}\r\n                 showPreloader={showPreload}/>\r\n      <Paginator page={episodePage}\r\n                 setPage={setEpisodePage}\r\n                 count={count}/>\r\n    </div>\r\n  )\r\n}","import {gql} from \"@apollo/client\"\r\n\r\n\r\n\r\nexport const getEpisode = (id: number) => {\r\n  return gql`\r\n    query Episode {\r\n    episode(id: ${id}) {\r\n      id\r\n      name\r\n      air_date\r\n      episode\r\n      characters {\r\n        image\r\n      }\r\n      created\r\n   }\r\n  }\r\n `\r\n}\r\n\r\n\r\nexport const getEpisodeList = (page: number, name: string) => {\r\n  return gql`\r\n   query Episodes {\r\n   episodes(page: ${page}, filter: {name: \"${name}\"}) {\r\n    info {\r\n      count\r\n      pages\r\n    }\r\n    results {\r\n      id\r\n      name\r\n      air_date\r\n      episode\r\n      characters {\r\n        image\r\n      }\r\n      created\r\n    }\r\n  }\r\n}\r\n `\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport styles from \"./Locations.module.scss\"\r\nimport {PageTitle} from \"../../components/page-title/PageTitle\"\r\nimport {ListFilter} from \"../../components/filter/listFilter/ListFilter\"\r\nimport {DataTable} from \"../../components/table/DataTable\"\r\nimport {ModalWindow} from \"../../components/modal/ModalWindow\"\r\nimport {Paginator} from \"../../components/paginator/Paginator\"\r\nimport {ErrorMessage} from \"../../components/error/ErrorMessage\"\r\nimport {useQuery} from \"@apollo/client\"\r\nimport {getLocation, getLocationList} from \"../../graphql/locationGQL\"\r\n\r\n\r\n\r\nexport const Locations = () => {\r\n  const [count, setCount] = useState(1)\r\n  const [locationPage, setLocationPage] = useState<number>(1)\r\n  const [locationId, setLocationId] = useState<number>(1)\r\n  const [clearFilterField, setClearFilterField] = useState<boolean>(false)\r\n  const [showPreloader, setShowPreload] = useState<boolean>(false)\r\n  const [showModal, setShowModal] = useState<boolean>(false)\r\n  const [filerValues, setFilerValues] = useState({\r\n    name: \"\",\r\n    type: \"\",\r\n    dimension: \"\"\r\n  })\r\n\r\n  const { data, loading, error } = useQuery(getLocationList(locationPage, filerValues))\r\n  const location = useQuery(getLocation(locationId))\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setShowPreload(loading)\r\n    setClearFilterField(false)\r\n  }, [loading])\r\n\r\n  useEffect(() => {\r\n    const pagesCount = data?.locations?.info?.pages\r\n    if (pagesCount) {\r\n      setCount(pagesCount)\r\n    }\r\n  }, [data])\r\n\r\n\r\n  const reset = () => {\r\n    setFilerValues({ name: \"\", type: \"\", dimension: \"\" })\r\n    setClearFilterField(true)\r\n  }\r\n\r\n\r\n  const filterLocations = (value: any) => {\r\n    setFilerValues(value)\r\n  }\r\n\r\n  const openModalWithSelectedEpisode = (id: number) => {\r\n    setShowModal(true)\r\n    setLocationId(id)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <PageTitle title={\"Locations\"}/>\r\n      {error &&\r\n      <ErrorMessage reset={reset}\r\n                    error={error}\r\n                    setShowModal={setShowModal}/>\r\n      }\r\n      <ModalWindow name={\"locations\"}\r\n                   selectedEl={location?.data?.location}\r\n                   showModal={showModal}\r\n                   setShowModal={setShowModal}/>\r\n      <ListFilter name={\"locations\"}\r\n                  inputsName={[\"Name\", \"Type\", \"Dimension\",]}\r\n                  clearFilterField={clearFilterField}\r\n                  filterList={filterLocations}/>\r\n      <DataTable componentName={\"locations\"}\r\n                 openModalWithSelectedEl={openModalWithSelectedEpisode}\r\n                 data={data?.locations}\r\n                 showPreloader={showPreloader}/>\r\n      <Paginator page={locationPage}\r\n                 setPage={setLocationPage}\r\n                 count={count}/>\r\n    </div>\r\n  )\r\n}","import {gql} from \"@apollo/client\"\r\n\r\n\r\n\r\nexport const getLocation = (id: number) => {\r\n  return gql`\r\n   query Location {\r\n    location(id: ${id}) {\r\n    id\r\n    name\r\n    type\r\n    dimension\r\n    created\r\n    residents {\r\n      image   \r\n    }\r\n    }\r\n   }\r\n  `\r\n}\r\nexport const getLocationList = (page: number, { name, type, dimension }: Record<string, string>) => {\r\n  return gql`\r\n    query Locations {\r\n      locations(page: ${page}, filter: {\r\n        name: \"${name}\"\r\n        type: \"${type}\"\r\n        dimension: \"${dimension}\"\r\n      }) \r\n      {\r\n      info {\r\n        count\r\n        pages\r\n      }\r\n       results {\r\n        id\r\n        name\r\n        type\r\n        dimension\r\n        residents {\r\n          image\r\n        }\r\n        created\r\n       }\r\n      }\r\n    }\r\n  `\r\n}","import React, {FC} from \"react\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport styles from \"./NavLinkItem.module.scss\"\r\n\r\n\r\n\r\ninterface PropsType {\r\n  el: string\r\n}\r\n\r\nexport const NavLinkItem: FC<PropsType> = ({ el }) => {\r\n  return (\r\n    <NavLink className={styles.navigationLink} to={el}>\r\n      {el}\r\n    </NavLink>\r\n  )\r\n}","import React, {FC} from \"react\"\r\nimport styles from \"./Navigation.module.scss\"\r\nimport {NavLinkItem} from \"./navItem/NavLinkItem\"\r\n\r\n\r\n\r\ninterface PropsTypes {\r\n  pagesName: string[]\r\n}\r\n\r\nexport const Navigation: FC<PropsTypes> = ({ pagesName }) => {\r\n\r\n  return (\r\n    <div className={styles.appNavigationBlock}>\r\n      {pagesName.map((el, i) => <NavLinkItem key={i} el={el}/>)}\r\n    </div>\r\n  )\r\n}","import React from \"react\"\r\nimport {Redirect, Route, Switch} from \"react-router-dom\"\r\nimport {Characters} from \"../../views/characters/Characters\"\r\nimport {Episodes} from \"../../views/episodes/Episodes\"\r\nimport {Locations} from \"../../views/locations/Locations\"\r\nimport styles from \"./App.module.scss\"\r\nimport {PageTitle} from \"../page-title/PageTitle\"\r\nimport {Navigation} from \"../navigation/Navigation\"\r\n\r\n\r\n\r\nexport const App = () => {\r\n  const pagesName = [\"characters\", \"episodes\", \"locations\"]\r\n\r\n\r\n  return (\r\n    <div className={styles.appWrapper}>\r\n      <PageTitle/>\r\n      <Navigation pagesName={pagesName}/>\r\n      <Switch>\r\n        <Route path={\"/characters\"}>\r\n          <Characters/>\r\n        </Route>\r\n        <Route path={\"/episodes\"}>\r\n          <Episodes/>\r\n        </Route>\r\n        <Route path={\"/locations\"}>\r\n          <Locations/>\r\n        </Route>\r\n        <Redirect to={\"/characters\"}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport {App} from \"./components/app/App\"\r\nimport \"./styles/null-styles.scss\"\r\nimport {BrowserRouter} from \"react-router-dom\"\r\nimport {ApolloClient, ApolloProvider, InMemoryCache} from \"@apollo/client\"\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://rickandmortyapi.com/graphql\",\r\n  cache: new InMemoryCache()\r\n})\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ApolloProvider client={client}>\r\n      <App/>\r\n    </ApolloProvider>\r\n  </BrowserRouter>\r\n  , document.getElementById(\"root\"))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"DataTable_tableContainer__ZWJEH\",\"table\":\"DataTable_table__2l9J_\",\"tableTitleCell\":\"DataTable_tableTitleCell__2sle0\",\"tableTitleIcon\":\"DataTable_tableTitleIcon__2SYqp\",\"tableTitleIconActive\":\"DataTable_tableTitleIconActive__1LFJW\",\"tableRow\":\"DataTable_tableRow__1lAR2\",\"tableCell\":\"DataTable_tableCell__2tnFX\",\"charImage\":\"DataTable_charImage__3Ouj5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Characters_wrapper__16Z5m\",\"fadeIn\":\"Characters_fadeIn__1T8eH\",\"dataTable\":\"Characters_dataTable__3JBKg\",\"filterWrapper\":\"Characters_filterWrapper__ZE4bn\",\"filterSubWrapper\":\"Characters_filterSubWrapper__xE3ZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ErrorMessage_wrapper__3EVvA\",\"error\":\"ErrorMessage_error__1G9iz\",\"button\":\"ErrorMessage_button__1nJ9V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__190MA\"};"],"sourceRoot":""}